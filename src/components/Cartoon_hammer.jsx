/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Ozor (https://sketchfab.com/Ozor)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/cartoon-hammer-026d752a132d48369a4e854af2a5e86b
title: Cartoon hammer
*/

import React, { useCallback, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useState } from "@react-three/fiber";

const offset = 1.5;
const yOffset = 1;
var hammerPosX = 0;
var hammerPosY = -10;
var hammerPosZ = 0;
var rotateY=0;
var hammerScale = false;
var rotating = false;
var rotateIntervalId;

function rotateHammer(){  
  if(rotateY < 90){
    rotateY += 15;
  }
  else{
    hammerScale = false;
    rotateY = 0;
    rotating = false;
  }
}

export function ActiveHammer(index){
  hammerScale = true;
  switch(index){
    case 0:
      hammerPosX = 0 + offset;
      hammerPosY = yOffset;
      hammerPosZ = 0;
      rotateY = 0;
      rotating = true;
      break;
    case 1:
      hammerPosX = 0 + offset;
      hammerPosY = yOffset;
      hammerPosZ = 6;
      rotateY = 0;
      rotating = true;
      break;
    case 2:
      hammerPosX = 6 + offset;
      hammerPosY = yOffset;
      hammerPosZ = 6;
      rotateY = 0;
      rotating = true;
      break;
    case 3:
      hammerPosX = 6 + offset;
      hammerPosY = yOffset;
      hammerPosZ = 0;
      rotateY = 0;
      rotating = true;
      break;
    case 4:
      hammerPosX = 6 + offset;
      hammerPosY = yOffset;
      hammerPosZ = -6;
      rotateY = 0;
      rotating = true;
      break;
    case 5:
      hammerPosX = 0 + offset;
      hammerPosY = yOffset;
      hammerPosZ = -6;
      rotateY = 0;
      rotating = true;
      break;
    case 6:
      hammerPosX = -6 + offset;
      hammerPosY = yOffset;
      hammerPosZ = -6;
      rotateY = 0;
      rotating = true;
      break;
    case 7:
      hammerPosX = -6 + offset;
      hammerPosY = yOffset;
      hammerPosZ = 0;
      rotateY = 0;
      rotating = true;
      break;
    case 8:
      hammerPosX = -6 + offset;
      hammerPosY = yOffset;
      hammerPosZ = 6;
      rotateY = 0;
      rotating = true;
      break;
  }
}

export default function Model(props) {
  const { nodes, materials } = useGLTF('model/cartoon_hammer.glb')
  const group = useRef();
  
  useFrame(()=>{
    group.current.rotation.y = rotateY / 180 * Math.PI;
    if(rotating){
      rotateHammer();
    }
    //hammerScale에 따라서 해머 위치 조정
    if(hammerScale){
      group.current.position.x = hammerPosX;
      group.current.position.y = hammerPosY;
      group.current.position.z = hammerPosZ;
    }
    else{
      group.current.position.x = 0;
      group.current.position.y = -10;
      group.current.position.z = 0;
    }
  });
  
  return (
    <group ref={group} {...props} dispose={null} position={[0, -10, 0]} rotation={[Math.PI/2, 0, 0]} >
      <mesh geometry={nodes.Marteau_0.geometry} material={materials.Gris} />
      <mesh geometry={nodes.Marteau_1.geometry} material={materials.Marron_clair} />
      <mesh geometry={nodes.Marteau_1_1.geometry} material={materials.Marron_clair} />
      <mesh geometry={nodes.Marteau_2.geometry} material={materials.Jaune} />
    </group>
  )
}

useGLTF.preload('model/cartoon_hammer.glb')
